---
import Button from "./ui/button.astro";

// Navigation items
const navItems = [
    { href: '/about', label: 'About us', ariaLabel: 'About Debugro' },
    { href: '/case-studies', label: 'Case Studies', ariaLabel: 'View our case studies' },
    { href: '/blogs', label: 'Blog', ariaLabel: 'Blog articles' },
    { href: '/contact', label: 'Contact', ariaLabel: 'Contact information' },
];

// Get current pathname for active link detection
const currentPath = Astro.url.pathname;

// Function to check if link is active
const isActiveLink = (href: string) => {
    if (href === '/' && currentPath === '/') return true;
    if (href !== '/' && currentPath.startsWith(href)) return true;
    return false;
};

const defaultLinkClass = "relative nav-link py-2 hover:text-white transition-colors duration-200";
const activeLinkClass = "relative nav-link py-2 text-white transition-colors duration-200 active";
---

<nav
    class="sticky top-0 w-full h-16 md:h-20 bg-[var(--color-primary-dark)] text-[var(--color-primary-light)] border-b border-[var(--color-primary-light-dark)] z-50 backdrop-blur-md"
    role="navigation"
    aria-label="Main navigation"
>
    <div class="container mx-auto flex justify-between items-center h-full px-4 md:px-5">
        <div>
            <a href="/" class={`inline-block ${isActiveLink('/') ? 'active' : ''}`}>
                <h1 class="text-base md:text-lg font-bold flex">
                    <span class="text-[var(--color-primary)]">Debug</span>
                    <span class="text-[var(--color-primary-light)]">ro.</span>
                </h1>
            </a>
        </div>

        <!-- Mobile Menu Button -->
        <button
            id="mobile-menu-button"
            class="md:hidden flex flex-col justify-center items-center w-8 h-8 gap-1.5 focus:outline-none"
            aria-label="Toggle menu"
            aria-expanded="false"
        >
            <span class="w-6 h-0.5 bg-current transition-transform origin-center"></span>
            <span class="w-6 h-0.5 bg-current transition-opacity"></span>
            <span class="w-6 h-0.5 bg-current transition-transform origin-center"></span>
        </button>

        <!-- Desktop Navigation -->
        <div class="hidden md:flex gap-6 items-center">
            {navItems.map(item => (
                <a
                    href={item.href}
                    aria-label={item.ariaLabel}
                    class={isActiveLink(item.href) ? activeLinkClass : defaultLinkClass}
                >
                    {item.label}
                </a>
            ))}
            <Button variant="primary" size="sm">Let's talk</Button>
        </div>

        <!-- Mobile Navigation (drawer) -->
        <div id="mobile-menu-backdrop" class="fixed inset-0 bg-black/40 opacity-0 pointer-events-none transition-opacity duration-300 z-30"></div>

        <div id="mobile-menu" 
             class="fixed md:hidden inset-y-0 left-0 w-4/5 max-w-xs bg-[var(--color-primary-dark)]/95 backdrop-blur-xl border-r border-[var(--color-primary-light-dark)]/30 transform -translate-x-full transition-transform duration-300 ease-in-out z-40 h-screen"
             aria-hidden="true">
            <div class="px-4 py-6">
                <div class="flex items-center justify-between mb-4">
                    <a href="/" class="text-lg font-bold inline-flex items-center">
                        <span class="text-[var(--color-primary)]">Debug</span>
                        <span class="text-[var(--color-primary-light)]">ro.</span>
                    </a>
                    <button id="mobile-menu-close" class="p-2 rounded-md focus:outline-none text-[var(--color-primary-light)] hover:text-white text-xl" aria-label="Close menu">Ã—</button>
                </div>

                <nav class="flex flex-col gap-2">
                    {navItems.map(item => (
                        <a
                            href={item.href}
                            aria-label={item.ariaLabel}
                            class={`block py-3 px-3 rounded-lg transition-colors duration-300 text-[var(--color-primary-light)] hover:text-white hover:bg-white/10 ${isActiveLink(item.href) ? 'bg-[var(--color-primary)]/20 text-white font-medium' : ''}`}
                        >
                            {item.label}
                        </a>
                    ))}
                </nav>

                <div class="mt-4">
                    <Button variant="primary" size="lg" class="w-full">Let's talk</Button>
                </div>
            </div>
        </div>
    </div>
</nav>

<style>
    .nav-link::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 50%;
        width: 0;
        height: 2px;
        background: var(--color-primary);
        transition: all 0.3s ease;
        transform: translateX(-50%);
    }

    .nav-link:hover::after {
        width: 100%;
    }

    /* Active link styles */
    .nav-link.active::after {
        width: 100%;
        background: var(--color-secondary);
    }

    .nav-link.active {
        color: white;
        font-weight: 500;
    }

    /* Logo active state */
    a.active h1 span:first-child {
        color: var(--color-secondary);
    }

    /* Mobile menu button animation */
    #mobile-menu-button[aria-expanded="true"] span:first-child {
        transform: rotate(45deg) translate(5px, 5px);
    }

    #mobile-menu-button[aria-expanded="true"] span:nth-child(2) {
        opacity: 0;
    }

    #mobile-menu-button[aria-expanded="true"] span:last-child {
        transform: rotate(-45deg) translate(5px, -5px);
    }

    /* Mobile menu visibility */
    #mobile-menu.show {
        transform: translateY(0);
        opacity: 1;
        pointer-events: auto;
    }
</style>

<script>
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const mobileMenuBackdrop = document.getElementById('mobile-menu-backdrop');
    const mobileMenuClose = document.getElementById('mobile-menu-close');

    function openMobileMenu() {
        mobileMenu?.classList.remove('-translate-x-full');
        mobileMenu?.classList.add('translate-x-0');
        mobileMenuBackdrop?.classList.remove('opacity-0', 'pointer-events-none');
        mobileMenuBackdrop?.classList.add('opacity-100');
        mobileMenuButton?.setAttribute('aria-expanded', 'true');
        if (typeof document !== 'undefined') document.body.style.overflow = 'hidden';
    }

    function closeMobileMenu() {
        mobileMenu?.classList.remove('translate-x-0');
        mobileMenu?.classList.add('-translate-x-full');
        mobileMenuBackdrop?.classList.add('opacity-0');
        mobileMenuBackdrop?.classList.add('pointer-events-none');
        mobileMenuButton?.setAttribute('aria-expanded', 'false');
        if (typeof document !== 'undefined') document.body.style.overflow = '';
    }

    mobileMenuButton?.addEventListener('click', (e) => {
        const expanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
        if (expanded) closeMobileMenu(); else openMobileMenu();
    });

    mobileMenuClose?.addEventListener('click', () => closeMobileMenu());

    mobileMenuBackdrop?.addEventListener('click', () => closeMobileMenu());

    // Close on Escape
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') closeMobileMenu();
    });

    // Close mobile menu when screen is resized to desktop size
    window.addEventListener('resize', () => {
        if (window.innerWidth >= 768) closeMobileMenu();
    });
</script>
