---
import Layout from '../layouts/Layout.astro';

const seoData = {
    title: "Contact Debugro - Let's Discuss Your Software Needs",
    description: "Get in touch with Debugro for custom software solutions, web development, mobile apps, and cloud services. We're here to help transform your business with technology.",
    keywords: "contact Debugro, software development contact, IT consulting, custom software inquiry, tech support, Sri Lanka software company",
    canonicalUrl: "https://debugro.com/contact"
};

---

<Layout {...seoData}>
    <main class="relative py-16 lg:py-20 min-h-screen overflow-hidden bg-gradient-to-b from-[var(--color-primary-dark)] to-[#00151e]">
        {/* Background Elements */}
        <div class="absolute inset-0 bg-[linear-gradient(rgba(var(--color-primary-rgb),0.03)_1px,transparent_1px),linear-gradient(to_right,rgba(var(--color-primary-rgb),0.03)_1px,transparent_1px)] bg-[size:4rem_4rem] [mask-image:radial-gradient(ellipse_at_center,transparent_20%,black_70%)] animate-grid-flow"></div>

        {/* Large Gradient Orb - Top Right */}
        <div class="absolute top-[-20%] right-[-10%] w-[600px] h-[600px] rounded-full bg-gradient-to-br from-[var(--color-primary)]/20 to-transparent blur-3xl animate-float"></div>
        
        {/* Medium Gradient Orb - Bottom Left */}
        <div class="absolute bottom-[-10%] left-[-5%] w-[400px] h-[400px] rounded-full bg-gradient-to-tr from-[var(--color-primary-light)]/15 to-transparent blur-2xl animate-float-delayed"></div>

        {/* Radial Gradient Overlay */}
        <div class="absolute inset-0 bg-radial-gradient"></div>

        <div class="container relative z-10 mx-auto px-4 sm:px-6 lg:px-8">
            {/* Page Header */}
            <div class="text-center mb-16">
                <h1 class="text-4xl md:text-5xl font-bold text-[var(--color-primary-light)] mb-4">Get in Touch</h1>
                <p class="text-[var(--color-primary-light)]/80 text-lg max-w-2xl mx-auto">
                    Ready to transform your business with cutting-edge software solutions? We're here to help you succeed.
                </p>
            </div>

            <div class="grid lg:grid-cols-2 gap-12 lg:gap-16">
                {/* Calendar Section */}
                <div class="order-2 lg:order-1">
                    <div class="bg-[var(--color-primary-dark)]/80 backdrop-blur-sm p-6 md:p-8 rounded-2xl border border-[var(--color-primary-light-dark)]/30">
                        <h2 class="text-2xl font-bold text-white mb-6">Schedule a Meeting</h2>
                        <p class="text-[var(--color-text-secondary)] mb-6">
                            Select a date to schedule a consultation with our team. We'll discuss your project requirements and how we can help.
                        </p>
                        
                        {/* Calendar Container */}
                        <div id="calendar" class="bg-[var(--color-background)]/50 rounded-xl p-4 border border-[var(--color-primary-light-dark)]/20">
                            <div class="flex items-center justify-between mb-4">
                                <button id="prevMonth" class="p-2 rounded-lg hover:bg-[var(--color-primary)]/20 text-[var(--color-text-secondary)] hover:text-white transition-all">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
                                    </svg>
                                </button>
                                <h3 id="monthYear" class="text-lg font-semibold text-white"></h3>
                                <button id="nextMonth" class="p-2 rounded-lg hover:bg-[var(--color-primary)]/20 text-[var(--color-text-secondary)] hover:text-white transition-all">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
                                    </svg>
                                </button>
                            </div>
                            
                            {/* Days of week */}
                            <div class="grid grid-cols-7 gap-1 mb-2">
                                <div class="text-center text-xs font-medium text-[var(--color-text-muted)] p-2">Sun</div>
                                <div class="text-center text-xs font-medium text-[var(--color-text-muted)] p-2">Mon</div>
                                <div class="text-center text-xs font-medium text-[var(--color-text-muted)] p-2">Tue</div>
                                <div class="text-center text-xs font-medium text-[var(--color-text-muted)] p-2">Wed</div>
                                <div class="text-center text-xs font-medium text-[var(--color-text-muted)] p-2">Thu</div>
                                <div class="text-center text-xs font-medium text-[var(--color-text-muted)] p-2">Fri</div>
                                <div class="text-center text-xs font-medium text-[var(--color-text-muted)] p-2">Sat</div>
                            </div>
                            
                            {/* Calendar days */}
                            <div id="calendarDays" class="grid grid-cols-7 gap-1">
                                {/* Days will be populated by JavaScript */}
                            </div>
                        </div>
                        
                        <div class="mt-4 text-sm text-[var(--color-text-muted)]">
                            <p>• Fridays and Sundays are not available</p>
                            <p>• Select an available date to schedule your meeting</p>
                        </div>
                    </div>
                </div>

                {/* Contact Form Section */}
                <div class="order-1 lg:order-2">
                    <div class="bg-[var(--color-primary-dark)]/80 backdrop-blur-sm p-6 md:p-8 rounded-2xl border border-[var(--color-primary-light-dark)]/30">
                        <h2 class="text-2xl font-bold text-white mb-6">Send us a Message</h2>
                        <p class="text-[var(--color-text-secondary)] mb-6">
                            Have a question or want to discuss your project? Send us a message and we'll get back to you as soon as possible.
                        </p>
                        
                        <form id="contactForm" class="space-y-6">
                            <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                                <div>
                                    <label for="contactFirstName" class="block text-sm font-medium text-[var(--color-text-secondary)] mb-2">
                                        First Name *
                                    </label>
                                    <input
                                        type="text"
                                        id="contactFirstName"
                                        name="firstName"
                                        required
                                        class="w-full px-4 py-3 bg-[var(--color-primary-dark)]/50 border border-[var(--color-primary-light-dark)]/30 rounded-lg text-white placeholder-gray-400 focus:border-[var(--color-primary)] focus:ring-2 focus:ring-[var(--color-primary)]/50 focus:outline-none transition-all duration-200"
                                        placeholder="John"
                                    />
                                </div>
                                <div>
                                    <label for="contactLastName" class="block text-sm font-medium text-[var(--color-text-secondary)] mb-2">
                                        Last Name *
                                    </label>
                                    <input
                                        type="text"
                                        id="contactLastName"
                                        name="lastName"
                                        required
                                        class="w-full px-4 py-3 bg-[var(--color-primary-dark)]/50 border border-[var(--color-primary-light-dark)]/30 rounded-lg text-white placeholder-gray-400 focus:border-[var(--color-primary)] focus:ring-2 focus:ring-[var(--color-primary)]/50 focus:outline-none transition-all duration-200"
                                        placeholder="Doe"
                                    />
                                </div>
                            </div>

                            <div>
                                <label for="contactEmail" class="block text-sm font-medium text-[var(--color-text-secondary)] mb-2">
                                    Email Address *
                                </label>
                                <input
                                    type="email"
                                    id="contactEmail"
                                    name="email"
                                    required
                                    class="w-full px-4 py-3 bg-[var(--color-primary-dark)]/50 border border-[var(--color-primary-light-dark)]/30 rounded-lg text-white placeholder-gray-400 focus:border-[var(--color-primary)] focus:ring-2 focus:ring-[var(--color-primary)]/50 focus:outline-none transition-all duration-200"
                                    placeholder="john@example.com"
                                />
                            </div>

                            <div>
                                <label for="contactSubject" class="block text-sm font-medium text-[var(--color-text-secondary)] mb-2">
                                    Subject *
                                </label>
                                <input
                                    type="text"
                                    id="contactSubject"
                                    name="subject"
                                    required
                                    class="w-full px-4 py-3 bg-[var(--color-primary-dark)]/50 border border-[var(--color-primary-light-dark)]/30 rounded-lg text-white placeholder-gray-400 focus:border-[var(--color-primary)] focus:ring-2 focus:ring-[var(--color-primary)]/50 focus:outline-none transition-all duration-200"
                                    placeholder="Project inquiry"
                                />
                            </div>

                            <div>
                                <label for="contactMessage" class="block text-sm font-medium text-[var(--color-text-secondary)] mb-2">
                                    Message *
                                </label>
                                <textarea
                                    id="contactMessage"
                                    name="message"
                                    rows="6"
                                    required
                                    class="w-full px-4 py-3 bg-[var(--color-primary-dark)]/50 border border-[var(--color-primary-light-dark)]/30 rounded-lg text-white placeholder-gray-400 focus:border-[var(--color-primary)] focus:ring-2 focus:ring-[var(--color-primary)]/50 focus:outline-none transition-all duration-200 resize-none"
                                    placeholder="Tell us about your project or question..."
                                ></textarea>
                            </div>

                            <button
                                type="submit"
                                class="w-full bg-[var(--color-primary)] text-white px-6 py-3 rounded-lg hover:bg-[var(--color-primary-light)] transition-all duration-300 font-medium flex items-center justify-center space-x-2"
                            >
                                <span>Send Message</span>
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5" />
                                </svg>
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        {/* Booking Modal */}
        <div id="bookingModal" class="fixed inset-0 z-50 hidden items-center justify-center p-4 sm:p-6 md:p-20 bg-black/50 backdrop-blur-sm">
            <div class="modal-content w-full max-w-2xl transform overflow-hidden rounded-2xl bg-[var(--color-primary-dark)] p-6 text-left align-middle shadow-xl transition-all opacity-0 translate-y-4 duration-300">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-2xl font-semibold text-white">
                        Schedule Your Meeting
                    </h3>
                    <button id="closeModal" class="text-gray-400 hover:text-white transition-colors">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>

                <form id="bookingForm" class="space-y-6">
                    <div class="grid grid-cols-2 gap-6">
                        <div>
                            <label for="firstName" class="block text-sm font-medium text-gray-300 mb-2">First Name *</label>
                            <input
                                type="text"
                                id="firstName"
                                name="firstName"
                                required
                                class="w-full px-4 py-3 bg-[var(--color-primary-dark)]/50 border border-[var(--color-primary-light-dark)]/30 rounded-lg text-white placeholder-gray-400 focus:border-[var(--color-primary)] focus:ring-2 focus:ring-[var(--color-primary)]/50 focus:outline-none transition-all duration-200"
                                placeholder="John"
                            />
                        </div>
                        <div>
                            <label for="lastName" class="block text-sm font-medium text-gray-300 mb-2">Last Name *</label>
                            <input
                                type="text"
                                id="lastName"
                                name="lastName"
                                required
                                class="w-full px-4 py-3 bg-[var(--color-primary-dark)]/50 border border-[var(--color-primary-light-dark)]/30 rounded-lg text-white placeholder-gray-400 focus:border-[var(--color-primary)] focus:ring-2 focus:ring-[var(--color-primary)]/50 focus:outline-none transition-all duration-200"
                                placeholder="Doe"
                            />
                        </div>
                    </div>

                    <div>
                        <label for="email" class="block text-sm font-medium text-gray-300 mb-2">Email Address *</label>
                        <input
                            type="email"
                            id="email"
                            name="email"
                            required
                            class="w-full px-4 py-3 bg-[var(--color-primary-dark)]/50 border border-[var(--color-primary-light-dark)]/30 rounded-lg text-white placeholder-gray-400 focus:border-[var(--color-primary)] focus:ring-2 focus:ring-[var(--color-primary)]/50 focus:outline-none transition-all duration-200"
                            placeholder="john@example.com"
                        />
                    </div>

                    <div>
                        <label for="subject" class="block text-sm font-medium text-gray-300 mb-2">Subject *</label>
                        <input
                            type="text"
                            id="subject"
                            name="subject"
                            required
                            class="w-full px-4 py-3 bg-[var(--color-primary-dark)]/50 border border-[var(--color-primary-light-dark)]/30 rounded-lg text-white placeholder-gray-400 focus:border-[var(--color-primary)] focus:ring-2 focus:ring-[var(--color-primary)]/50 focus:outline-none transition-all duration-200"
                            placeholder="Meeting topic or project discussion"
                        />
                    </div>

                    <div>
                        <label for="meetingDate" class="block text-sm font-medium text-gray-300 mb-2">Selected Date</label>
                        <input
                            type="text"
                            id="selectedDateDisplay"
                            readonly
                            class="w-full px-4 py-3 bg-[var(--color-background)]/50 border border-[var(--color-primary-light-dark)]/30 rounded-lg text-gray-300 cursor-not-allowed"
                            placeholder="No date selected"
                        />
                        <input
                            type="hidden"
                            id="meetingDate"
                            name="meetingDate"
                            required
                        />
                    </div>

                    <div>
                        <label for="description" class="block text-sm font-medium text-gray-300 mb-2">Brief Description *</label>
                        <textarea
                            id="description"
                            name="description"
                            rows="4"
                            required
                            class="w-full px-4 py-3 bg-[var(--color-primary-dark)]/50 border border-[var(--color-primary-light-dark)]/30 rounded-lg text-white placeholder-gray-400 focus:border-[var(--color-primary)] focus:ring-2 focus:ring-[var(--color-primary)]/50 focus:outline-none transition-all duration-200 resize-none"
                            placeholder="Please describe what you'd like to discuss in the meeting..."
                        ></textarea>
                    </div>

                    <div class="flex justify-end gap-4 pt-4">
                        <button
                            type="button"
                            id="cancelBtn"
                            class="px-6 py-2 text-sm font-medium text-gray-300 hover:text-white border border-gray-600 rounded-lg hover:border-gray-500 transition-colors"
                        >
                            Cancel
                        </button>
                        <button
                            type="submit"
                            class="bg-[var(--color-primary)] px-6 py-2 text-sm font-medium text-white rounded-lg hover:bg-[var(--color-primary-light)] focus:outline-none focus:ring-2 focus:ring-[var(--color-primary)]/50 transition-all duration-300"
                        >
                            Schedule Meeting
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </main>
</Layout>

<script>
    interface CalendarManager {
        currentDate: Date;
        selectedDate: Date | null;
        modal: HTMLElement | null;
    }

    class CalendarManager implements CalendarManager {
        currentDate: Date;
        selectedDate: Date | null;
        modal: HTMLElement | null;

        constructor() {
            this.currentDate = new Date();
            this.selectedDate = null;
            this.modal = document.getElementById('bookingModal');
            this.init();
        }

        init(): void {
            this.renderCalendar();
            this.bindEvents();
        }

        bindEvents(): void {
            // Calendar navigation
            document.getElementById('prevMonth')?.addEventListener('click', () => {
                this.currentDate.setMonth(this.currentDate.getMonth() - 1);
                this.renderCalendar();
            });

            document.getElementById('nextMonth')?.addEventListener('click', () => {
                this.currentDate.setMonth(this.currentDate.getMonth() + 1);
                this.renderCalendar();
            });

            // Modal controls
            document.getElementById('closeModal')?.addEventListener('click', () => {
                this.closeModal();
            });

            document.getElementById('cancelBtn')?.addEventListener('click', () => {
                this.closeModal();
            });

            // Form submissions
            document.getElementById('bookingForm')?.addEventListener('submit', (e: Event) => {
                e.preventDefault();
                this.handleBookingSubmit(e);
            });

            document.getElementById('contactForm')?.addEventListener('submit', (e: Event) => {
                e.preventDefault();
                this.handleContactSubmit(e);
            });

            // Close modal on outside click
            this.modal?.addEventListener('click', (e: MouseEvent) => {
                if (e.target === this.modal) {
                    this.closeModal();
                }
            });
        }

        renderCalendar(): void {
            const monthNames = [
                'January', 'February', 'March', 'April', 'May', 'June',
                'July', 'August', 'September', 'October', 'November', 'December'
            ];

            const monthYear = document.getElementById('monthYear');
            const calendarDays = document.getElementById('calendarDays');

            if (!monthYear || !calendarDays) return;

            // Set month/year header
            monthYear.textContent = `${monthNames[this.currentDate.getMonth()]} ${this.currentDate.getFullYear()}`;

            // Clear previous days
            calendarDays.innerHTML = '';

            // Get first day of month and number of days
            const firstDay = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), 1);
            const lastDay = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() + 1, 0);
            const daysInMonth = lastDay.getDate();
            const startingDayOfWeek = firstDay.getDay();

            const today = new Date();
            today.setHours(0, 0, 0, 0);

            // Add empty cells for days before month starts
            for (let i = 0; i < startingDayOfWeek; i++) {
                const emptyDay = document.createElement('div');
                emptyDay.className = 'p-2';
                calendarDays.appendChild(emptyDay);
            }

            // Add days of the month
            for (let day = 1; day <= daysInMonth; day++) {
                const dayElement = document.createElement('button');
                const currentDateCheck = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), day);
                const dayOfWeek = currentDateCheck.getDay();
                
                // Check if day is in the past
                const isPast = currentDateCheck < today;
                
                // Check if day is Friday (5) or Sunday (0) - not available
                const isUnavailable = dayOfWeek === 0 || dayOfWeek === 5;
                
                dayElement.textContent = day.toString();
                dayElement.className = 'p-2 text-sm rounded-lg transition-all duration-200 w-full h-10';
                
                if (isPast || isUnavailable) {
                    dayElement.className += ' text-gray-500 cursor-not-allowed opacity-50';
                    dayElement.disabled = true;
                } else {
                    dayElement.className += ' text-white hover:bg-[var(--color-primary)]/30 hover:text-[var(--color-primary-light)] cursor-pointer';
                    dayElement.addEventListener('click', () => {
                        this.selectDate(currentDateCheck);
                    });
                }

                // Highlight selected date
                if (this.selectedDate && 
                    currentDateCheck.getTime() === this.selectedDate.getTime()) {
                    dayElement.className += ' bg-[var(--color-primary)] text-white';
                }

                calendarDays.appendChild(dayElement);
            }
        }

        selectDate(date: Date): void {
            this.selectedDate = new Date(date);
            this.renderCalendar(); // Re-render to show selection
            this.openModal();
        }

        openModal(): void {
            if (!this.modal || !this.selectedDate) return;

            // Set the selected date in the modal
            const selectedDateDisplay = document.getElementById('selectedDateDisplay') as HTMLInputElement;
            const hiddenDateInput = document.getElementById('meetingDate') as HTMLInputElement;
            
            if (selectedDateDisplay && hiddenDateInput) {
                const formattedDate = this.selectedDate.toLocaleDateString('en-US', {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
                selectedDateDisplay.value = formattedDate;
                hiddenDateInput.value = this.selectedDate.toISOString().split('T')[0];
            }

            this.modal.classList.remove('hidden');
            this.modal.classList.add('flex');
            
            setTimeout(() => {
                const modalContent = this.modal?.querySelector('.modal-content') as HTMLElement;
                if (modalContent) {
                    modalContent.classList.remove('opacity-0', 'translate-y-4');
                    modalContent.classList.add('opacity-100', 'translate-y-0');
                }
            }, 10);
        }

        closeModal(): void {
            if (!this.modal) return;

            const modalContent = this.modal.querySelector('.modal-content') as HTMLElement;
            if (modalContent) {
                modalContent.classList.remove('opacity-100', 'translate-y-0');
                modalContent.classList.add('opacity-0', 'translate-y-4');
            }

            setTimeout(() => {
                if (this.modal) {
                    this.modal.classList.remove('flex');
                    this.modal.classList.add('hidden');
                }
                this.resetForm('bookingForm');
            }, 300);
        }

        resetForm(formId: string): void {
            const form = document.getElementById(formId) as HTMLFormElement;
            if (form) {
                form.reset();
                if (formId === 'bookingForm') {
                    const selectedDateDisplay = document.getElementById('selectedDateDisplay') as HTMLInputElement;
                    if (selectedDateDisplay) {
                        selectedDateDisplay.value = '';
                    }
                }
            }
        }

        async handleBookingSubmit(e: Event): Promise<void> {
            const form = e.target as HTMLFormElement;
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());

            try {
                // Show loading state
                const submitBtn = form.querySelector('button[type="submit"]') as HTMLButtonElement;
                const originalText = submitBtn.textContent || '';
                submitBtn.textContent = 'Scheduling...';
                submitBtn.disabled = true;

                // Here you would integrate with Firebase
                // For now, we'll simulate a successful submission
                await this.simulateApiCall();

                // Show success message
                this.showNotification('Meeting scheduled successfully! We\'ll send you a confirmation email.', 'success');
                this.closeModal();
                this.selectedDate = null;
                this.renderCalendar();

                // Reset button
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;

                console.log('Booking data:', data);
                // TODO: Integrate with Firebase here
                // await this.saveBookingToFirebase(data);

            } catch (error) {
                console.error('Error submitting booking:', error);
                this.showNotification('Error scheduling meeting. Please try again.', 'error');
                
                // Reset button
                const submitBtn = form.querySelector('button[type="submit"]') as HTMLButtonElement;
                submitBtn.textContent = 'Schedule Meeting';
                submitBtn.disabled = false;
            }
        }

        async handleContactSubmit(e: Event): Promise<void> {
            const form = e.target as HTMLFormElement;
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());

            try {
                // Show loading state
                const submitBtn = form.querySelector('button[type="submit"]') as HTMLButtonElement;
                const originalText = submitBtn.innerHTML;
                submitBtn.innerHTML = '<span>Sending...</span>';
                submitBtn.disabled = true;

                // Simulate API call
                await this.simulateApiCall();

                // Show success message
                this.showNotification('Message sent successfully! We\'ll get back to you soon.', 'success');
                this.resetForm('contactForm');

                // Reset button
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;

                console.log('Contact data:', data);
                // TODO: Integrate with Firebase here
                // await this.saveContactToFirebase(data);

            } catch (error) {
                console.error('Error submitting contact form:', error);
                this.showNotification('Error sending message. Please try again.', 'error');
                
                // Reset button
                const submitBtn = form.querySelector('button[type="submit"]') as HTMLButtonElement;
                if (submitBtn) {
                    submitBtn.innerHTML = '<span>Send Message</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5"><path stroke-linecap="round" stroke-linejoin="round" d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5" /></svg>';
                    submitBtn.disabled = false;
                }
            }
        }

        simulateApiCall(): Promise<void> {
            return new Promise(resolve => setTimeout(resolve, 1500));
        }

        showNotification(message: string, type: 'info' | 'success' | 'error' = 'info'): void {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg max-w-sm transform translate-x-full transition-transform duration-300 ${
                type === 'success' 
                    ? 'bg-[var(--color-secondary)] text-white' 
                    : type === 'error' 
                    ? 'bg-red-500 text-white' 
                    : 'bg-[var(--color-primary)] text-white'
            }`;

            notification.innerHTML = `
                <div class="flex items-center space-x-3">
                    <div class="flex-shrink-0">
                        ${type === 'success' 
                            ? '<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg>'
                            : type === 'error'
                            ? '<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path></svg>'
                            : '<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path></svg>'
                        }
                    </div>
                    <p class="text-sm font-medium">${message}</p>
                    <button class="flex-shrink-0 ml-4 text-white/70 hover:text-white transition-colors" onclick="this.parentElement.parentElement.remove()">
                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                        </svg>
                    </button>
                </div>
            `;

            document.body.appendChild(notification);

            // Animate in
            setTimeout(() => {
                notification.classList.remove('translate-x-full');
                notification.classList.add('translate-x-0');
            }, 100);

            // Auto remove after 5 seconds
            setTimeout(() => {
                notification.classList.remove('translate-x-0');
                notification.classList.add('translate-x-full');
                setTimeout(() => notification.remove(), 300);
            }, 5000);
        }
    }

    // Initialize calendar when DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
        new CalendarManager();
    });
</script>

<style>
    .bg-radial-gradient {
        background: radial-gradient(
            ellipse at center,
            rgba(var(--color-primary-rgb), 0.1) 0%,
            transparent 70%
        );
    }

    @keyframes grid-flow {
        0% { transform: translate(0, 0); }
        100% { transform: translate(-4rem, -4rem); }
    }

    @keyframes float {
        0%, 100% { transform: translateY(0px) rotate(0deg); }
        50% { transform: translateY(-20px) rotate(180deg); }
    }

    @keyframes float-delayed {
        0%, 100% { transform: translateY(0px) rotate(0deg); }
        50% { transform: translateY(-15px) rotate(-180deg); }
    }

    .animate-grid-flow {
        animation: grid-flow 20s linear infinite;
    }

    .animate-float {
        animation: float 20s ease-in-out infinite;
    }

    .animate-float-delayed {
        animation: float-delayed 25s ease-in-out infinite;
        animation-delay: -5s;
    }

    :root {
        --color-primary-rgb: 59, 130, 246;
    }

    .modal-content {
        max-height: 90vh;
        overflow-y: auto;
    }

    /* Custom scrollbar for modal */
    .modal-content::-webkit-scrollbar {
        width: 6px;
    }

    .modal-content::-webkit-scrollbar-track {
        background: rgba(var(--color-primary-rgb), 0.1);
        border-radius: 3px;
    }

    .modal-content::-webkit-scrollbar-thumb {
        background: rgba(var(--color-primary-rgb), 0.5);
        border-radius: 3px;
    }

    .modal-content::-webkit-scrollbar-thumb:hover {
        background: rgba(var(--color-primary-rgb), 0.7);
    }

    /* Calendar hover effects */
    #calendarDays button:not(:disabled):hover {
        transform: scale(1.05);
    }

    #calendarDays button:not(:disabled):active {
        transform: scale(0.95);
    }

    /* Form field focus animations */
    input:focus, textarea:focus {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(var(--color-primary-rgb), 0.15);
    }

    /* Button hover effects */
    button:not(:disabled):hover {
        transform: translateY(-1px);
    }

    button:not(:disabled):active {
        transform: translateY(0);
    }
</style>
