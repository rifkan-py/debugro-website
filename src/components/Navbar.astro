---
import Button from "./ui/button.astro";

// Navigation items
const navItems = [
    { href: '/about', label: 'About us', ariaLabel: 'About Debugro' },
    { href: '/case-studies', label: 'Case Studies', ariaLabel: 'View our case studies' },
    { href: '/blogs', label: 'Blog', ariaLabel: 'Blog articles' },
    { href: '/contact', label: 'Contact', ariaLabel: 'Contact information' },
];

// Get current pathname for active link detection
const currentPath = Astro.url.pathname;

// Function to check if link is active
const isActiveLink = (href: string) => {
    if (href === '/' && currentPath === '/') return true;
    if (href !== '/' && currentPath.startsWith(href)) return true;
    return false;
};

const defaultLinkClass = "relative nav-link py-2 hover:text-white transition-colors duration-200";
const activeLinkClass = "relative nav-link py-2 text-white transition-colors duration-200 active";
---

<nav
    class="sticky top-0 w-full h-16 md:h-20 bg-[var(--color-primary-dark)] text-[var(--color-primary-light)] border-b border-[var(--color-primary-light-dark)] z-50 backdrop-blur-md"
    role="navigation"
    aria-label="Main navigation"
>
    <div class="container mx-auto flex justify-between items-center h-full px-4 md:px-5">
        <div>
            <a href="/" class={`inline-block ${isActiveLink('/') ? 'active' : ''}`}>
                <h1 class="text-base md:text-lg font-bold flex">
                    <span class="text-[var(--color-primary)]">Debug</span>
                    <span class="text-[var(--color-primary-light)]">ro.</span>
                </h1>
            </a>
        </div>

        <!-- Mobile Menu Button -->
        <button
            id="mobile-menu-button"
            class="md:hidden flex flex-col justify-center items-center w-8 h-8 gap-1.5 focus:outline-none"
            aria-label="Toggle menu"
            aria-expanded="false"
        >
            <span class="w-6 h-0.5 bg-current transition-transform origin-center"></span>
            <span class="w-6 h-0.5 bg-current transition-opacity"></span>
            <span class="w-6 h-0.5 bg-current transition-transform origin-center"></span>
        </button>

        <!-- Desktop Navigation -->
        <div class="hidden md:flex gap-6 items-center">
            {navItems.map(item => (
                <a
                    href={item.href}
                    aria-label={item.ariaLabel}
                    class={isActiveLink(item.href) ? activeLinkClass : defaultLinkClass}
                >
                    {item.label}
                </a>
            ))}
            <Button variant="primary" size="sm">Let's talk</Button>
        </div>

        <!-- Mobile Navigation -->
        <div id="mobile-menu" 
             class="fixed md:hidden top-16 left-0 w-full bg-[var(--color-primary-dark)] bg-opacity-95 backdrop-blur-lg transform -translate-y-full transition-all duration-300 ease-in-out z-40"
             aria-hidden="true">
            <div class="container mx-auto px-4 py-4 flex flex-col gap-2">
                {navItems.map(item => (
                    <a
                        href={item.href}
                        aria-label={item.ariaLabel}
                        class={`block py-3 px-4 rounded-lg transition-colors duration-300 hover:bg-white/10 ${isActiveLink(item.href) ? 'bg-[var(--color-primary)]/20 text-white font-medium' : ''}`}
                    >
                        {item.label}
                    </a>
                ))}
                <Button variant="primary" size="lg" class="w-full mt-2">Let's talk</Button>
            </div>
        </div>
    </div>
</nav>

<style>
    .nav-link::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 50%;
        width: 0;
        height: 2px;
        background: var(--color-primary);
        transition: all 0.3s ease;
        transform: translateX(-50%);
    }

    .nav-link:hover::after {
        width: 100%;
    }

    /* Active link styles */
    .nav-link.active::after {
        width: 100%;
        background: var(--color-secondary);
    }

    .nav-link.active {
        color: white;
        font-weight: 500;
    }

    /* Logo active state */
    a.active h1 span:first-child {
        color: var(--color-secondary);
    }

    /* Mobile menu button animation */
    #mobile-menu-button[aria-expanded="true"] span:first-child {
        transform: rotate(45deg) translate(5px, 5px);
    }

    #mobile-menu-button[aria-expanded="true"] span:nth-child(2) {
        opacity: 0;
    }

    #mobile-menu-button[aria-expanded="true"] span:last-child {
        transform: rotate(-45deg) translate(5px, -5px);
    }

    /* Mobile menu visibility */
    #mobile-menu.show {
        transform: translateY(0);
        opacity: 1;
        pointer-events: auto;
    }
</style>

<script>
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');

    if (mobileMenuButton && mobileMenu) {
        mobileMenuButton.addEventListener('click', () => {
            const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
            mobileMenuButton.setAttribute('aria-expanded', (!isExpanded).toString());
            mobileMenu.setAttribute('aria-hidden', isExpanded.toString());
            
            // Toggle the show class for animation and visibility
            mobileMenu.classList.toggle('show');

            // Prevent body scroll when menu is open
            document.body.style.overflow = !isExpanded ? 'hidden' : '';
        });

        // Close mobile menu when clicking outside
        document.addEventListener('click', (e) => {
            if (!mobileMenu.contains(e.target as Node) && 
                !mobileMenuButton.contains(e.target as Node) && 
                mobileMenu.classList.contains('show')) {
                mobileMenu.classList.remove('show');
                mobileMenuButton.setAttribute('aria-expanded', 'false');
                mobileMenu.setAttribute('aria-hidden', 'true');
                document.body.style.overflow = '';
            }
        });

        // Close mobile menu when screen is resized to desktop size
        window.addEventListener('resize', () => {
            if (window.innerWidth >= 768 && mobileMenu.classList.contains('show')) {
                mobileMenu.classList.remove('show');
                mobileMenuButton.setAttribute('aria-expanded', 'false');
                mobileMenu.setAttribute('aria-hidden', 'true');
                document.body.style.overflow = '';
            }
        });
    }
</script>
